package dw.memo;

public class note240426 {

    // 1. 서블렛(Servlet)
    //      HTTP같은 '웹' 통신규칙을 제어하기위한
    //      '자바'인터페이스의 구현체
    //      90%는 HTTP 사용(HTTP뿐만 아니라 다른것도 사용)
    //      SMTP, FTP
    //      tomcat이 서블렛임(정확히는 서블렛 컨테이너)
    //      → 전통적인 방식의 웹서버(안정적)
    //      특징 :
    //       1. 요청분석
    //       2. 페이지를 만듦
    //        http서블렛, 디스패쳐서블렛? 등도 있다고함(종휴 많음)
    //      서블렛 자체가 완벽한 프로그램임
    //      * 서블렛으로만 서버구성하는 회사는 거의 없다고함

    // 2. CSR(Client-Side-Rendering) - 유저쪽에서 보여주기?(어쨌든 결과를 보여주는것
    //     Rendering : 디지털화면에서 보이는 모든 것(페이지의 생성)
    //     → 관련된 용어 : OpenGL, DirectX, Vercan
    //     사용하면 서버는 좀 제한적인 일을 함(하는일이 별로없음)
    //     MVC 형태가 아닌 보여주는것을 브라우저가 보여주는 것
    //     모바일 앱의 대부분 이것을 채택
    //     장점 : 서버의 업무량이 적음
    //            일단 로딩이 끝나면 바로바로 볼 수 있음
    //           
    //     단점 : 클라이언트가 일이 많음
    //           네트워크 사용량이 많을 수 있음(텍스트를 봤을때)

    // 3. SSR(Server-Side-Rendering) - 서버쪽에서 보여주기?
    //      정적 - 한번 만들어놓고 쭉 그것만 쓰는가
    //      동적 - 그때그떄 상황에따라 페이지를 재생산 하느냐
    //      장점 : 완성된 상태의 완성품을 제공
    //      단점 : 서버의 정보량이 많음(서버가 해야될 일이 많음)
    //             초기로딩이 빠르나 계속 로딩해야됨(봤던것도 다시 로딩해야됨)
    //             캐시가 있어 어느정도 보완이 되긴 하지만 용량의 한계가 있음
    
    // 4. SEO(Search-Engine-Optimization) - 서치엔진 최적화
    //      검색 상위에 올라가있는거

    // Next.js - CSR, SSR 둘다 지원해주는거
    //      나온지 5년정도 됨(14버전)

    // JPQL로 작성핼때 limit은 못씀(쓰게되면 )
    // → 그렇기에 service부분에 .limit(limit).collect(Collecters.toList())
}
